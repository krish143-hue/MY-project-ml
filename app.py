# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b6CFvgxA5fvbhH2b_zDcG8Psis1vROht
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load artifacts
model = joblib.load("best_model.pkl")
scaler = joblib.load("scaler.pkl")
label_encoders = joblib.load("label_encoders.pkl")

st.set_page_config(page_title="Heart Disease Predictor", page_icon="❤️")
st.title("❤️ Heart Disease Prediction App")

st.markdown("Enter the following details to check the risk of heart disease:")

# Input fields
age = st.number_input("Age", 20, 100, 50)
sex = st.selectbox("Sex", ["male", "female"])
cp = st.selectbox("Chest Pain Type", ["typical angina", "atypical angina", "non-anginal pain", "asymptomatic"])
trestbps = st.number_input("Resting Blood Pressure (mm Hg)", 80, 200, 120)
chol = st.number_input("Cholesterol (mg/dL)", 100, 400, 200)
fbs = st.selectbox("Fasting Blood Sugar > 120 mg/dL", ["true", "false"])
restecg = st.selectbox("Resting ECG Results", ["normal", "ST-T wave abnormality", "left ventricular hypertrophy"])
thalach = st.number_input("Max Heart Rate Achieved", 60, 250, 150)
exang = st.selectbox("Exercise Induced Angina", ["yes", "no"])
oldpeak = st.number_input("ST depression", 0.0, 6.0, 1.0, step=0.1)
slope = st.selectbox("Slope of Peak Exercise ST", ["upsloping", "flat", "downsloping"])
ca = st.selectbox("Number of Major Vessels (0-3)", [0, 1, 2, 3])
thal = st.selectbox("Thalassemia", ["normal", "fixed defect", "reversible defect"])
dataset = st.selectbox("Dataset Source", ["cleveland", "hungarian", "switzerland", "va"])

# Create input DataFrame
input_data = {
    "age": age,
    "sex": sex,
    "cp": cp,
    "trestbps": trestbps,
    "chol": chol,
    "fbs": fbs,
    "restecg": restecg,
    "thalach": thalach,
    "exang": exang,
    "oldpeak": oldpeak,
    "slope": slope,
    "ca": ca,
    "thal": thal,
    "dataset": dataset
}

input_df = pd.DataFrame([input_data])

# Encode categorical variables
for col in label_encoders:
    input_df[col] = label_encoders[col].transform(input_df[col])

# Scale input
input_scaled = scaler.transform(input_df)

# Predict
if st.button("Predict"):
    prediction = model.predict(input_scaled)[0]
    if prediction == 1:
        st.error("⚠️ High risk of heart disease.")
    else:
        st.success("✅ Low risk of heart disease.")